package securly

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"io/fs"
	"time"

	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z Encryption) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "alg"
	o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
	o = msgp.AppendString(o, jwaToString(z.Alg))
	// string "key"
	o = append(o, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, keyToString(z.Key))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Encryption) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Alg")
					return
				}
				z.Alg = stringToJWA(zb0002)
			}
		case "key":
			{
				var zb0003 string
				zb0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Key")
					return
				}
				z.Key = stringToKey(zb0003)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Encryption) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(jwaToString(z.Alg)) + 4 + msgp.StringPrefixSize + len(keyToString(z.Key))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *File) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(8)
	var zb0001Mask uint8 /* 8 bits */
	_ = zb0001Mask
	if z.Size == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Mode == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.ModTime == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Owner == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.UID == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Group == "" {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.GID == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "data"
		o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
		o = msgp.AppendBytes(o, z.Data)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "size"
			o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
			o = msgp.AppendInt64(o, z.Size)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "mode"
			o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
			o = msgp.AppendUint32(o, uint32(z.Mode))
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "modtime"
			o = append(o, 0xa7, 0x6d, 0x6f, 0x64, 0x74, 0x69, 0x6d, 0x65)
			o = msgp.AppendTimeExt(o, z.ModTime)
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "owner"
			o = append(o, 0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
			o = msgp.AppendString(o, z.Owner)
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "uid"
			o = append(o, 0xa3, 0x75, 0x69, 0x64)
			o = msgp.AppendUint32(o, z.UID)
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// string "group"
			o = append(o, 0xa5, 0x67, 0x72, 0x6f, 0x75, 0x70)
			o = msgp.AppendString(o, z.Group)
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// string "gid"
			o = append(o, 0xa3, 0x67, 0x69, 0x64)
			o = msgp.AppendUint32(o, z.GID)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *File) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mode":
			{
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Mode")
					return
				}
				z.Mode = fs.FileMode(zb0002)
			}
		case "modtime":
			z.ModTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "owner":
			z.Owner, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "uid":
			z.UID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "group":
			z.Group, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
		case "gid":
			z.GID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *File) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data) + 5 + msgp.Int64Size + 5 + msgp.Uint32Size + 8 + msgp.TimeSize + 6 + msgp.StringPrefixSize + len(z.Owner) + 4 + msgp.Uint32Size + 6 + msgp.StringPrefixSize + len(z.Group) + 4 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Files == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Response.IsZero() {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "payload"
		o = append(o, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		o = msgp.AppendBytes(o, z.Payload)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "files"
			o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
			o = msgp.AppendMapHeader(o, uint32(len(z.Files)))
			for za0001, za0002 := range z.Files {
				o = msgp.AppendString(o, za0001)
				o, err = za0002.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "response"
			o = append(o, 0xa8, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
			if z.Response == nil {
				o = msgp.AppendNil(o)
			} else {
				// map header, size 2
				// string "alg"
				o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
				o = msgp.AppendString(o, jwaToString(z.Response.Alg))
				// string "key"
				o = append(o, 0xa3, 0x6b, 0x65, 0x79)
				o = msgp.AppendString(o, keyToString(z.Response.Key))
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string]File, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 File
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		case "response":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Response = nil
			} else {
				if z.Response == nil {
					z.Response = new(Encryption)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Response")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Response")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						{
							var zb0004 string
							zb0004, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Response", "Alg")
								return
							}
							z.Response.Alg = stringToJWA(zb0004)
						}
					case "key":
						{
							var zb0005 string
							zb0005, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Response", "Key")
								return
							}
							z.Response.Key = stringToKey(zb0005)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Response")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 6 + msgp.MapHeaderSize
	if z.Files != nil {
		for za0001, za0002 := range z.Files {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 9
	if z.Response == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(jwaToString(z.Response.Alg)) + 4 + msgp.StringPrefixSize + len(keyToString(z.Response.Key))
	}
	return
}
