package wire

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Encryption) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Encryption) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "alg"
	err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alg)
	if err != nil {
		err = msgp.WrapError(err, "Alg")
		return
	}
	// write "key"
	err = en.Append(0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Encryption) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "alg"
	o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
	o = msgp.AppendString(o, z.Alg)
	// string "key"
	o = append(o, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Encryption) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Encryption) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Alg) + 4 + msgp.StringPrefixSize + len(z.Key)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *File) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "mode":
			z.Mode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "modtime":
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "owner":
			z.Owner, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "uid":
			z.UID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "group":
			z.Group, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
		case "gid":
			z.GID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *File) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	_ = zb0001Mask
	if z.Mode == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.ModTime == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Owner == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.UID == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Group == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.GID == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "data"
		err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Data)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// write "mode"
			err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
			if err != nil {
				return
			}
			err = en.WriteUint32(z.Mode)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "modtime"
			err = en.Append(0xa7, 0x6d, 0x6f, 0x64, 0x74, 0x69, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteTimeExt(z.ModTime)
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// write "owner"
			err = en.Append(0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
			if err != nil {
				return
			}
			err = en.WriteString(z.Owner)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// write "uid"
			err = en.Append(0xa3, 0x75, 0x69, 0x64)
			if err != nil {
				return
			}
			err = en.WriteUint32(z.UID)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "group"
			err = en.Append(0xa5, 0x67, 0x72, 0x6f, 0x75, 0x70)
			if err != nil {
				return
			}
			err = en.WriteString(z.Group)
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// write "gid"
			err = en.Append(0xa3, 0x67, 0x69, 0x64)
			if err != nil {
				return
			}
			err = en.WriteUint32(z.GID)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *File) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	_ = zb0001Mask
	if z.Mode == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.ModTime == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Owner == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.UID == 0 {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Group == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.GID == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "data"
		o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
		o = msgp.AppendBytes(o, z.Data)
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "mode"
			o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
			o = msgp.AppendUint32(o, z.Mode)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "modtime"
			o = append(o, 0xa7, 0x6d, 0x6f, 0x64, 0x74, 0x69, 0x6d, 0x65)
			o = msgp.AppendTimeExt(o, z.ModTime)
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "owner"
			o = append(o, 0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
			o = msgp.AppendString(o, z.Owner)
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "uid"
			o = append(o, 0xa3, 0x75, 0x69, 0x64)
			o = msgp.AppendUint32(o, z.UID)
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "group"
			o = append(o, 0xa5, 0x67, 0x72, 0x6f, 0x75, 0x70)
			o = msgp.AppendString(o, z.Group)
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// string "gid"
			o = append(o, 0xa3, 0x67, 0x69, 0x64)
			o = msgp.AppendUint32(o, z.GID)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *File) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "mode":
			z.Mode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "modtime":
			z.ModTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "owner":
			z.Owner, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "uid":
			z.UID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "group":
			z.Group, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
		case "gid":
			z.GID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *File) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data) + 5 + msgp.Uint32Size + 8 + msgp.TimeSize + 6 + msgp.StringPrefixSize + len(z.Owner) + 4 + msgp.Uint32Size + 6 + msgp.StringPrefixSize + len(z.Group) + 4 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Inner) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "sha":
			z.SHA, err = dc.ReadBytes(z.SHA)
			if err != nil {
				err = msgp.WrapError(err, "SHA")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Inner) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "alg"
	err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alg)
	if err != nil {
		err = msgp.WrapError(err, "Alg")
		return
	}
	// write "sha"
	err = en.Append(0xa3, 0x73, 0x68, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SHA)
	if err != nil {
		err = msgp.WrapError(err, "SHA")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Inner) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "alg"
	o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
	o = msgp.AppendString(o, z.Alg)
	// string "sha"
	o = append(o, 0xa3, 0x73, 0x68, 0x61)
	o = msgp.AppendBytes(o, z.SHA)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Inner) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "sha":
			z.SHA, bts, err = msgp.ReadBytesBytes(bts, z.SHA)
			if err != nil {
				err = msgp.WrapError(err, "SHA")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Inner) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Alg) + 4 + msgp.BytesPrefixSize + len(z.SHA)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string]File, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 File
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		case "response":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Response")
					return
				}
				z.Response = nil
			} else {
				if z.Response == nil {
					z.Response = new(Encryption)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Response")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Response")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						z.Response.Alg, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Response", "Alg")
							return
						}
					case "key":
						z.Response.Key, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Response", "Key")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Response")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Response == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "payload"
		err = en.Append(0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Payload)
		if err != nil {
			err = msgp.WrapError(err, "Payload")
			return
		}
		// write "files"
		err = en.Append(0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Files)))
		if err != nil {
			err = msgp.WrapError(err, "Files")
			return
		}
		for za0001, za0002 := range z.Files {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Files", za0001)
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// write "response"
			err = en.Append(0xa8, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
			if err != nil {
				return
			}
			if z.Response == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// map header, size 2
				// write "alg"
				err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
				if err != nil {
					return
				}
				err = en.WriteString(z.Response.Alg)
				if err != nil {
					err = msgp.WrapError(err, "Response", "Alg")
					return
				}
				// write "key"
				err = en.Append(0xa3, 0x6b, 0x65, 0x79)
				if err != nil {
					return
				}
				err = en.WriteString(z.Response.Key)
				if err != nil {
					err = msgp.WrapError(err, "Response", "Key")
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	_ = zb0001Mask
	if z.Response == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "payload"
		o = append(o, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		o = msgp.AppendBytes(o, z.Payload)
		// string "files"
		o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(z.Files)))
		for za0001, za0002 := range z.Files {
			o = msgp.AppendString(o, za0001)
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Files", za0001)
				return
			}
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "response"
			o = append(o, 0xa8, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
			if z.Response == nil {
				o = msgp.AppendNil(o)
			} else {
				// map header, size 2
				// string "alg"
				o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
				o = msgp.AppendString(o, z.Response.Alg)
				// string "key"
				o = append(o, 0xa3, 0x6b, 0x65, 0x79)
				o = msgp.AppendString(o, z.Response.Key)
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string]File, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 File
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		case "response":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Response = nil
			} else {
				if z.Response == nil {
					z.Response = new(Encryption)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Response")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Response")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						z.Response.Alg, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Response", "Alg")
							return
						}
					case "key":
						z.Response.Key, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Response", "Key")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Response")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 6 + msgp.MapHeaderSize
	if z.Files != nil {
		for za0001, za0002 := range z.Files {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 9
	if z.Response == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.Response.Alg) + 4 + msgp.StringPrefixSize + len(z.Response.Key)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Outer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "jws":
			z.JWS, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "JWS")
				return
			}
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Outer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "jws"
	err = en.Append(0x82, 0xa3, 0x6a, 0x77, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.JWS)
	if err != nil {
		err = msgp.WrapError(err, "JWS")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Outer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "jws"
	o = append(o, 0x82, 0xa3, 0x6a, 0x77, 0x73)
	o = msgp.AppendString(o, z.JWS)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Outer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "jws":
			z.JWS, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JWS")
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Outer) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.JWS) + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}
