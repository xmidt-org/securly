package wire

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Encrypted) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string][]byte, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		case "encrypt":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Encrypt")
					return
				}
				z.Encrypt = nil
			} else {
				if z.Encrypt == nil {
					z.Encrypt = new(Response)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Encrypt")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Encrypt")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						z.Encrypt.Alg, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Alg")
							return
						}
					case "key":
						z.Encrypt.Key, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Key")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Encrypt")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Encrypted) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "payload"
	err = en.Append(0x83, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "files"
	err = en.Append(0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Files)))
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	for za0001, za0002 := range z.Files {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Files")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001)
			return
		}
	}
	// write "encrypt"
	err = en.Append(0xa7, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74)
	if err != nil {
		return
	}
	if z.Encrypt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "alg"
		err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
		if err != nil {
			return
		}
		err = en.WriteString(z.Encrypt.Alg)
		if err != nil {
			err = msgp.WrapError(err, "Encrypt", "Alg")
			return
		}
		// write "key"
		err = en.Append(0xa3, 0x6b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.Encrypt.Key)
		if err != nil {
			err = msgp.WrapError(err, "Encrypt", "Key")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Encrypted) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "payload"
	o = append(o, 0x83, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "files"
	o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Files)))
	for za0001, za0002 := range z.Files {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	// string "encrypt"
	o = append(o, 0xa7, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74)
	if z.Encrypt == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "alg"
		o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
		o = msgp.AppendString(o, z.Encrypt.Alg)
		// string "key"
		o = append(o, 0xa3, 0x6b, 0x65, 0x79)
		o = msgp.AppendString(o, z.Encrypt.Key)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Encrypted) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string][]byte, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		case "encrypt":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Encrypt = nil
			} else {
				if z.Encrypt == nil {
					z.Encrypt = new(Response)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Encrypt")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Encrypt")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						z.Encrypt.Alg, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Alg")
							return
						}
					case "key":
						z.Encrypt.Key, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Key")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Encrypt")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Encrypted) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 6 + msgp.MapHeaderSize
	if z.Files != nil {
		for za0001, za0002 := range z.Files {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BytesPrefixSize + len(za0002)
		}
	}
	s += 8
	if z.Encrypt == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.Encrypt.Alg) + 4 + msgp.StringPrefixSize + len(z.Encrypt.Key)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Inner) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "shas":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "SHAs")
				return
			}
			if z.SHAs == nil {
				z.SHAs = make(map[string]SHA, zb0002)
			} else if len(z.SHAs) > 0 {
				for key := range z.SHAs {
					delete(z.SHAs, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 SHA
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SHAs")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "SHAs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "SHAs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						za0002.Alg, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "SHAs", za0001, "Alg")
							return
						}
					case "value":
						za0002.Value, err = dc.ReadBytes(za0002.Value)
						if err != nil {
							err = msgp.WrapError(err, "SHAs", za0001, "Value")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "SHAs", za0001)
							return
						}
					}
				}
				z.SHAs[za0001] = za0002
			}
		case "encrypt":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Encrypt")
					return
				}
				z.Encrypt = nil
			} else {
				if z.Encrypt == nil {
					z.Encrypt = new(Response)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Encrypt")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Encrypt")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						z.Encrypt.Alg, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Alg")
							return
						}
					case "key":
						z.Encrypt.Key, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Key")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Encrypt")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Inner) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "payload"
	err = en.Append(0x83, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "shas"
	err = en.Append(0xa4, 0x73, 0x68, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.SHAs)))
	if err != nil {
		err = msgp.WrapError(err, "SHAs")
		return
	}
	for za0001, za0002 := range z.SHAs {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "SHAs")
			return
		}
		// map header, size 2
		// write "alg"
		err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
		if err != nil {
			return
		}
		err = en.WriteString(za0002.Alg)
		if err != nil {
			err = msgp.WrapError(err, "SHAs", za0001, "Alg")
			return
		}
		// write "value"
		err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes(za0002.Value)
		if err != nil {
			err = msgp.WrapError(err, "SHAs", za0001, "Value")
			return
		}
	}
	// write "encrypt"
	err = en.Append(0xa7, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74)
	if err != nil {
		return
	}
	if z.Encrypt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "alg"
		err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
		if err != nil {
			return
		}
		err = en.WriteString(z.Encrypt.Alg)
		if err != nil {
			err = msgp.WrapError(err, "Encrypt", "Alg")
			return
		}
		// write "key"
		err = en.Append(0xa3, 0x6b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.Encrypt.Key)
		if err != nil {
			err = msgp.WrapError(err, "Encrypt", "Key")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Inner) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "payload"
	o = append(o, 0x83, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "shas"
	o = append(o, 0xa4, 0x73, 0x68, 0x61, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.SHAs)))
	for za0001, za0002 := range z.SHAs {
		o = msgp.AppendString(o, za0001)
		// map header, size 2
		// string "alg"
		o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
		o = msgp.AppendString(o, za0002.Alg)
		// string "value"
		o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
		o = msgp.AppendBytes(o, za0002.Value)
	}
	// string "encrypt"
	o = append(o, 0xa7, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74)
	if z.Encrypt == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "alg"
		o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
		o = msgp.AppendString(o, z.Encrypt.Alg)
		// string "key"
		o = append(o, 0xa3, 0x6b, 0x65, 0x79)
		o = msgp.AppendString(o, z.Encrypt.Key)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Inner) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "shas":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SHAs")
				return
			}
			if z.SHAs == nil {
				z.SHAs = make(map[string]SHA, zb0002)
			} else if len(z.SHAs) > 0 {
				for key := range z.SHAs {
					delete(z.SHAs, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 SHA
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SHAs")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SHAs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "SHAs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						za0002.Alg, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "SHAs", za0001, "Alg")
							return
						}
					case "value":
						za0002.Value, bts, err = msgp.ReadBytesBytes(bts, za0002.Value)
						if err != nil {
							err = msgp.WrapError(err, "SHAs", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "SHAs", za0001)
							return
						}
					}
				}
				z.SHAs[za0001] = za0002
			}
		case "encrypt":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Encrypt = nil
			} else {
				if z.Encrypt == nil {
					z.Encrypt = new(Response)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Encrypt")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Encrypt")
						return
					}
					switch msgp.UnsafeString(field) {
					case "alg":
						z.Encrypt.Alg, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Alg")
							return
						}
					case "key":
						z.Encrypt.Key, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Encrypt", "Key")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Encrypt")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Inner) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 5 + msgp.MapHeaderSize
	if z.SHAs != nil {
		for za0001, za0002 := range z.SHAs {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + 1 + 4 + msgp.StringPrefixSize + len(za0002.Alg) + 6 + msgp.BytesPrefixSize + len(za0002.Value)
		}
	}
	s += 8
	if z.Encrypt == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.Encrypt.Alg) + 4 + msgp.StringPrefixSize + len(z.Encrypt.Key)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Outer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "jws":
			z.JWS, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "JWS")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string][]byte, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Outer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "jws"
	err = en.Append(0x82, 0xa3, 0x6a, 0x77, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.JWS)
	if err != nil {
		err = msgp.WrapError(err, "JWS")
		return
	}
	// write "files"
	err = en.Append(0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Files)))
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	for za0001, za0002 := range z.Files {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Files")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Outer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "jws"
	o = append(o, 0x82, 0xa3, 0x6a, 0x77, 0x73)
	o = msgp.AppendString(o, z.JWS)
	// string "files"
	o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Files)))
	for za0001, za0002 := range z.Files {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Outer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "jws":
			z.JWS, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JWS")
				return
			}
		case "files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string][]byte, zb0002)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
				z.Files[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Outer) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.JWS) + 6 + msgp.MapHeaderSize
	if z.Files != nil {
		for za0001, za0002 := range z.Files {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BytesPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Response) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "alg"
	err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alg)
	if err != nil {
		err = msgp.WrapError(err, "Alg")
		return
	}
	// write "key"
	err = en.Append(0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Response) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "alg"
	o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
	o = msgp.AppendString(o, z.Alg)
	// string "key"
	o = append(o, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Response) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Alg) + 4 + msgp.StringPrefixSize + len(z.Key)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SHA) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SHA) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "alg"
	err = en.Append(0x82, 0xa3, 0x61, 0x6c, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alg)
	if err != nil {
		err = msgp.WrapError(err, "Alg")
		return
	}
	// write "value"
	err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SHA) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "alg"
	o = append(o, 0x82, 0xa3, 0x61, 0x6c, 0x67)
	o = msgp.AppendString(o, z.Alg)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SHA) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "alg":
			z.Alg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alg")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SHA) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Alg) + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}
